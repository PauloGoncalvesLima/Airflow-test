stages:
  - lint
  - tests
  - sonarcloud
  - build
  - deploy
  - production


variables:
  SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
  GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task

# <------------- Definicao de Anchors ------------->

default:
  image: python:3.10-slim
  retry: 0
  before_script:
    - pip install -r requirements.txt # Install dependencies
    - pip install -r requirements.testing.txt # Install testing dependencies

.default_rule_python: &default_rule_python
  rules:
    - if: $CI_COMMIT_REF_PROTECTED == "true"
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - changes:
        - ./**/*.py
        - ./requirements.*

.default_pytest: &default_pytest
  <<: *default_rule_python
  script:
    - pytest . --junitxml=pytest_report.xml
  coverage: '/^TOTAL.+?(\d+\%)$/'
  artifacts:
    when: always
    paths:
      - pytest_report.xml
    reports:
      junit: pytest_report.xml


# <------------- Linters ------------->

lint-ruff:
  stage: lint
  <<: *default_rule_python
  script:
    - pip install ruff
    - ruff .

lint-black:
  stage: lint
  <<: *default_rule_python
  script:
    - pip install black
    - black . --check --verbose --color

lint-markdown:
  stage: lint
  image: node:20-bullseye
  inherit:
    default: false
  rules:
    - if: $CI_COMMIT_REF_PROTECTED == "true"
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - changes:
        - ./**/*.md
  variables:
    SHOW_ERRORS: "true"
  script:
    - echo "---------- Stage 1 - Install Prerequisites ----------"
    - apt-get update
    - apt-get install curl
    - npm install -g markdownlint-cli

    - echo "---------- Stage 2 - Run markdownlint (v0.32.2) ----------"
    - bash -c "$(curl -fsSL https://raw.githubusercontent.com/CICDToolbox/markdown-lint/master/pipeline.sh)"

# <------------- Testing ------------->

# pytest-3.8:
#   stage: tests
#   image: python:3.8-slim
#   <<: *default_pytest

pytest-3.9:
  stage: tests
  image: python:3.9-slim
  <<: *default_pytest

pytest-3.10:
  stage: tests
  image: python:3.10-slim
  <<: *default_pytest

pytest-3.11:
  stage: tests
  image: python:3.11-slim
  <<: *default_pytest

# <------------- QA ------------->

sonarcloud-check:
  stage: sonarcloud
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  inherit:
    default: false
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - sonar-scanner
  only:
    - merge_requests
    - main
    - development


# <------------- Continuous Deploy ------------->

build-image:
  stage: build
  tags:
    - docker
  services:
    - docker:dind
  artifacts:
    paths:
      - build.img
    expire_in: 1 hour
  image: docker
  inherit:
    default: false
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_REF_PROTECTED == "true"
  script:
    - echo "---------- install git ----------"
    - apk update
    - apk add git

    - echo "---------- Cloning the repository ----------"
    - git clone https://airflow-docker:$ACCESS_DOCKER_DAGS@gitlab.com/lappis-unb/decidimbr/servicos-de-dados/airflow-docker.git

    - echo "---------- Copying files to build the image ----------"
    - mv airflow-docker/Dockerfile .
    - mkdir airflow-dags
    - mv requirements.txt ./airflow-dags/.

    - echo "---------- Updating the Dockerfile ----------"
    - echo "COPY ./dags ./dags" >> Dockerfile
    - echo "COPY ./plugins ./plugins" >> Dockerfile

    - echo "--------- Building the image ----------"
    - docker build -t $CI_MERGE_REQUEST_TARGET_BRANCH_NAME-$CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA .
    - docker save -o build.img $CI_MERGE_REQUEST_TARGET_BRANCH_NAME-$CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA

push-image-to-registry:
  stage: deploy
  tags:
    - docker
  services:
    - docker:dind
  image: docker
  inherit:
    default: false
  rules:
    - if: $CI_COMMIT_BRANCH == "development"
  dependencies:
    - build-image
  script:
    - docker load -i build.img
    - docker login $CI_REGISTRY -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD"
    - docker push $CI_COMMIT_BRANCH-$CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA


push-image-to-registry-prod:
  stage: production
  tags:
    - docker
  services:
    - docker:dind
  image: docker
  inherit:
    default: false
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
  dependencies:
    - build-image
  script:
    - docker load -i build.img
    - docker login $CI_REGISTRY -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD"
    - docker push $CI_COMMIT_BRANCH-$CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
